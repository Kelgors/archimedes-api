datasource sqlite {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(uuid())
  email String @unique
  name String
  encryptedPassword String
  role Int @default(0)
  lists List[]
  permissions ListPermission[]
}

model List {
  id String @id @default(uuid())
  name String
  description String?
  ownerId String
  isPublic Boolean @default(false)
  bookmarks BookmarkOnList[]
  permissions ListPermission[]
  owner User @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model BookmarkOnList {
  listId String
  bookmarkId String
  list List @relation(fields: [listId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@id([ listId, bookmarkId ])
}

model ListPermission {
  listId String
  userId String
  isWritable Boolean @default(false)
  list List @relation(fields: [listId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@id([ listId, userId ])
}

model Tag {
  id String @id @default(uuid())
  name String
  bookmarks TagOnBookmark[]
}

model TagOnBookmark {
  tagId String
  bookmarkId String
  tag Tag @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@id([ tagId, bookmarkId ])
}

model Bookmark {
  id String @id @default(uuid())
  title String
  description String?
  url String
  createdAt DateTime @default(now())
  lists BookmarkOnList[]
  tags TagOnBookmark[]
}
